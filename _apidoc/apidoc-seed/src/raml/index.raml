#%RAML 0.8
---
title: iFLUX API
baseUri: https://api.iflux.io/{version}/
version: v1
protocols: [HTTPS]
mediaType: application/json

resourceTypes:
  - collection: !include resourceTypes/collection.raml
  - member: !include resourceTypes/member.raml

schemas:
  - errors: !include schemas/errors.json
  - eventSourceTemplate-get: !include schemas/templates/eventSources/response-get.json
  - eventSourceTemplate-patch: !include schemas/templates/eventSources/request-patch.json
  - eventSourceTemplate-post: !include schemas/templates/eventSources/request-post.json
  - eventSourceTemplate-getAll: !include schemas/templates/eventSources/response-array-get.json
  - organization-get: !include schemas/organizations/response-get.json
  - organization-patch: !include schemas/organizations/request-patch.json
  - organization-post: !include schemas/organizations/request-post.json
  - organization-getAll: !include schemas/organizations/response-array-get.json
  - user-get: !include schemas/users/response-get.json
  - user-patch: !include schemas/users/request-patch.json
  - user-post: !include schemas/users/request-post.json
  - user-getAll: !include schemas/users/response-array-get.json

traits:
  - auth: !include traits/authentication.raml


/organizations:
  is: [ auth ]
  type:
    collection:
      humanName: organization
      schemaBaseName: organization
      exampleGetResponse: !include examples/organizations/response-array-get.json
      examplePostRequest: !include examples/organizations/request-post.json
      examplePostError: !include examples/organizations/response-post-error.json

  /{id}:
    is: [ auth ]
    type:
      member:
        humanName: organization
        schemaBaseName: organization
        exampleGetResponse: !include examples/organizations/response-get.json
        examplePatchRequest: !include examples/organizations/request-patch.json
        examplePatchError: !include examples/organizations/response-patch-error.json
    patch:

/templates:
  description: Manage different tempaltes

  /eventSources:
    is: [ auth ]
    type:
      collection:
        humanName: event source template
        schemaBaseName: eventSourceTemplate
        exampleGetResponse: !include examples/templates/eventSources/response-array-get.json
        examplePostRequest: !include examples/templates/eventSources/request-post.json
        examplePostError: !include examples/templates/eventSources/response-post-error.json
    post:
      queryParameters:
        _remark:
          description: |
            `configurationSchema`, `callbackUrl` and `callbackToken` are mandatory once at least one of them is filled.

  /{id}:
    is: [ auth ]
    type:
      member:
        humanName: event source template
        schemaBaseName: eventSourceTemplate
        exampleGetResponse: !include examples/templates/eventSources/response-get.json
        examplePatchRequest: !include examples/templates/eventSources/request-patch.json
        examplePatchError: !include examples/templates/eventSources/response-patch-error.json
    patch:
      queryParameters:
        _remark:
          description: |
            `configurationSchema`, `callbackUrl` and `callbackToken` are mandatory. In the `PATCH` method, it means
            that the result saved MUST contain all the three information. If they are already present, patchin one at a time is
            possible.

/users:
  is: [ auth ]
  type:
    collection:
      humanName: user
      schemaBaseName: user
      exampleGetResponse: !include examples/users/response-array-get.json
      examplePostRequest: !include examples/users/request-post.json
      examplePostError: !include examples/users/response-post-error.json

  /{id}:
    is: [ auth ]
    type:
      member:
        humanName: user
        schemaBaseName: user
        exampleGetResponse: !include examples/users/response-get.json
        examplePatchRequest: !include examples/users/request-patch.json
        examplePatchError: !include examples/users/response-patch-error.json
    patch:



/events:
  description: This endpoint is used by event sources (e.g. sensors) to notify the occurence of events.
  post:
    description: Notify a list of events that have been captured by an event source. The events are processed asynchronously by the iFLUX service. The client must always send a list, even if it wants to notify a single event.
    body:
      application/json:
        example: |
          [
            {
              "timestamp" : "2015-01-12T05:21:07Z",
              "source" : "/event-sources/JI8928JFK",
              "type" : "/eventTypes/temperatureEventSchema",
              "properties" : {
                "temperature" : 22.5,
                "location" : "room 1"
              }
            },
            {
              "timestamp" : "2015-01-12T05:22:07Z",
              "source" : "/event-sources/JI8928JFK",
              "type" : "/eventTypes/temperatureEventSchema",
              "properties" : {
                "temperature" : 22.8,
                "location" : "room 1"
              }
            }
          ]
    responses:
      202:
        description: Accepted

/actions:
  description: This endpoint is implemented by action targets (e.g. actuators) and invoked by the iFLUX middleware to trigger actions.
  post:
    description: Trigger a list of actions, after the evaluation of rules and in reaction to the notification of events. The actions can be processes asynchronously.
    body:
      application/json:
        example: |
          [
            {
              "context" : {
                "event" : "not used in this version of the api",
                "rule" : "not used in this version of the api",
              },
              "type" : "/actionTypes/sendAlertViaEmailSchema",
              "properties" : {
                "email" : "user.name@iflux.io",
                "subject" : "Alert: something has happened!",
                "body" : "An event has been notified to iFLUX by a source and a rule states that we should inform you about it."
              }
            },
            {
              "context" : {
                "event" : "not used in this version of the api",
                "rule" : "not used in this version of the api",
              },
              "type" : "/actionTypes/sendAlertViaEmailSchema",
              "properties" : {
                "email" : "user.name@iflux.io",
                "subject" : "Alert: something has happened!",
                "body" : "An event has been notified to iFLUX by a source and a rule states that we should inform you about it."
              }
            }
          ]
    responses:
      202:
        description: Accepted

/rules:
  description: This endpoint is used to manage the rules evaluated by iFLUX when events are notified.
  get:
    description: Get the list of rules.
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                  "description": "If any event is notified, then write a message in Slack",
                  "reference": "NOVA-TIME-EVENT",
                  "enabled": true,
                  "if": {
                    "eventSource": "*",
                    "eventType": "io.iflux.events.current-time-event",
                    "eventProperties": {}
                  },
                  "then": {
                    "actionTarget": "https://nova-slack.herokuapp.com",
                    "actionSchema": "{\"type\":\"sendSlackMessage\",\"properties\":{\"channel\":\"aware\",\"message\":\"Tic Tac. ({{ timestamp }}) {{ properties.description}} {{ properties.hostname}}.\"}}"
                  },
                  "id": "1"
                }
              ]

  post:
    description: Create a new rule.
    body:
      application/json:
        example: |
          {
            "description" : "When a temperature event is received, notify Bob by email.",
            "reference": "TEMPERATURE-EMAIL-NOTIFICATION",
            "enabled": true,
            "if" : {
              "eventSource" : "/event-sources/JI8928JFK",
              "eventType" : "/eventTypes/temperatureEventSchema",
              "eventProperties" : {}
            }
            "then" : {
              "actionTarget" : "https://mail-gateway.iflux.io/api",
              "actionSchema" : "{\"type\" : \"sendEmail\", \"properties\" : {\"to\" : \"bob@iflux.io\", \"subject\" : \"New temperature\", \"body\" : \"The temperature in {{ properties.location }} is now: {{ properties.temperature }}.\" }}"
            }
          }
    responses:
      201:
        description: Created
  /{id}:
    patch:
      description: |
        Update a rule partially. You can provide a partial content for the rule and only the content received
        will be updated.
      body:
        application/json:
          example: |
            {
              "description" : "When a temperature event is received, notify Bob by email.",
            }

            or

            {
              "if" : {
                "eventSource" : "/event-sources/JI8928JFK",
              }
            }

      responses:
        200:
          description: Ok
    delete:
      description: Delete a rule.
      responses:
        204:
          description: No Content

  /actionSchema:
    /validate:
      post:
        description: |
          Validates the action schema. A `sample` must be provided and must contains all the fields used in the action
          schema. The action schema must be a valid JSON format escaped like it is send in the `POST /rules`.

          The validation process will parse the JSON, convert it through the template engine `Handlebars` and finally
          a replacement of the placeholders is done through `Handlebars`.
        body:
          application/json:
            example: |
              {
                "sample": {
                  "timestamp": "2015-01-12T05:22:07Z",
                  "properties": {
                    "location": "Lausanne",
                    "temperature": 22.5
                  }
                },
                "actionSchema" : "{\"type\" : \"sendEmail\", \"properties\" : {\"to\" : \"bob@iflux.io\", \"subject\" : \"New temperature\", \"body\" : \"The temperature in {{ properties.location }} is now: {{ properties.temperature }}.\" }}"
              }
        responses:
          200:
            description: The result correspond to the action schema processed.
            body:
              application/json:
                example: |
                  {
                    "type" : "sendEmail",
                    "properties" : {
                      "to" : "bob@iflux.io",
                      "subject" : "New temperature",
                      "body\" : "The temperature in Lausanne is now: 22.5."
                    }
                  }
          422:
            description: A processing error occured.
            body:
              application/json:
                example: |
                  {
                    error: "Invalid JSON format"
                  }
